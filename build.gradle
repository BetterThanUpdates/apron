//file:noinspection GradlePackageVersionRange
plugins {
	id "java-library"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "babric-loom" version "1.4-SNAPSHOT" apply false
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def ENV = System.getenv()

version = rootProject.mod_version

def getSubprojectVersion(project) {
	return rootProject.version
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }

	project.dependencies {
		deps.each {
			api it
		}
	}
}

allprojects {
	group = rootProject.maven_group

	apply plugin: "maven-publish"
	apply plugin: "java-library"
	//apply plugin: "checkstyle"
	apply plugin: "babric-loom"

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 8
	}

	java {
		// Must be added before the split source sets are setup.
		withSourcesJar()
	}

	loom {
		gluedMinecraftJar()
		customMinecraftManifest.set("https://babric.github.io/manifest-polyfill/${minecraft_version}.json")
		intermediaryUrl.set("https://maven.glass-launcher.net/babric/babric/intermediary/%1\$s/intermediary-%1\$s-v2.jar")
		enableTransitiveAccessWideners = true
	}

	repositories {
		mavenCentral()
		maven {
			name 'Babric'
			url 'https://maven.glass-launcher.net/babric'
			content {
				includeGroup 'babric'
				includeGroup 'org.lwjgl.lwjgl'
			}
		}
		maven {
			name 'Legacy Fabric'
			url "https://repo.legacyfabric.net/repository/legacyfabric/"
			content {
				includeGroup 'net.legacyfabric'
				includeGroup 'net.legacyfabric.legacy-fabric-api'
			}
		}
		// Used for StationAPI and HowManyItems.
		maven {
			name = 'Glass Snapshots'
			url = 'https://maven.glass-launcher.net/snapshots'
		}
		maven {
			name = 'Froge'
			url 'https://maven.minecraftforge.net/'
		}
		// Used for mappings.
		maven {
			name = 'Glass Releases'
			url = 'https://maven.glass-launcher.net/releases'
		}

		maven {
			name 'Modrinth'
			url 'https://api.modrinth.com/maven'
			content {
				includeGroup 'maven.modrinth'
			}
		}
		maven {
			name 'JitPack'
			url 'https://jitpack.io'
		}

		flatDir {
			dirs rootProject.rootDir.toString() + "/remapped/client"
			dirs rootProject.rootDir.toString() + "/remapped/server"
			dirs rootProject.rootDir.toString() + "/libs"
		}
	}

	allprojects.each { p ->
		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.legacyfabric:beta-yarn:${rootProject.minecraft_version}+build.${rootProject.mappings}"
		modApi "babric:fabric-loader:${rootProject.loader_version}"

		modApi("net.legacyfabric.legacy-fabric-api:legacy-fabric-logger-api-v1:${rootProject.lfapi_version}")

		// Done
	//	modRuntimeOnly(group: "remapped.client", name: "modloader", version: "b1.7.3")
	//	modRuntimeOnly(group: "remapped.client", name: "modloadermp-1.7.3-unofficial", version: "v2")
//		modRuntimeOnly(group: "remapped.server", name: "modloadermp-1.7.3-unofficial-server", version: "v2")
	//	modRuntimeOnly(group: "remapped.client", name: "reforged-client", version: "1.0.1")
	//	modRuntimeOnly(group: "remapped.client", name: "audiomod", version: "b1.7.3")
//		modRuntimeOnly(group: "remapped.client", name: "shockahpi", version: "r5.1")
	//	modRuntimeOnly(group: "remapped.client", name: "playerapi-1.7.3", version: "v1.7")
	//	modRuntimeOnly(group: "remapped.client", name: "itemspriteapi", version: "v1.2")
	// 	modRuntimeOnly(group: "remapped.client", name: "guiapi0.11.0", version: "1.7")
	//	modRuntimeOnly(group: "remapped.client", name: "modoptionsapi", version: "v0.7")
//		modRuntimeOnly(group: "remapped.client", name: "reforgedsapi-client")
//		modRuntimeOnly(group: "remapped.server", name: "minecraftforge-server", version: "1.0.7-20110907")
		// Todo
		implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}"))
		implementation("com.github.thecatcore.CursedMixinExtensions:fabric:1.0.0")
		implementation("com.github.thecatcore:WFVAIO:1.1.0")
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}

		repositories {
		}
	}

	tasks.withType(JavaCompile) {
		options.deprecation = true
	}
}

subprojects {
	dependencies {
		if (project.name != "apron") {
			api(project.dependencies.project(path: ":apron", configuration: 'namedElements'))
		}
	}

	javadoc.enabled = false
}

subprojects.each {
	remapJar.dependsOn("${it.path}:remapJar")
}

dependencies {
	afterEvaluate {
		subprojects.each {
			api project(path: "${it.path}", configuration: "namedElements")
		}
	}

//	implementation "org.slf4j:slf4j-api:1.8.0-beta4"
//	implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.17.2'
//
//	modRuntimeOnly "net.modificationstation:StationAPI:${project.stapi_version}"
//
//	// Optional, but convenient mods for mod creators and users alike.
//	modRuntimeOnly("com.github.calmilamsy:ModMenu:${project.modmenu_version}") {
//		transitive false
//	}
//	modRuntimeOnly("net.glasslauncher.mods:GlassConfigAPI:${project.gcapi_version}") {
//		transitive false
//	}
//	modRuntimeOnly("net.glasslauncher:HowManyItems-Fabric-Unofficial:${project.howmanyitems_version}") {
//		transitive false
//	}
//	modRuntimeOnly ("com.github.paulevsGitch:BHCreative:${project.bhcreative_version}") {
//		transitive false
//	}
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
	from("FORGE_LICENSE")
	from("PAULSCODE_LICENSE")

	from("./original/client") { into("libs") }
	from("./original/server") { into("libs") }
}

remapJar {
	afterEvaluate {
		subprojects.each {
			// Include the jar from the sub project.
			nestedJars.from project("${it.path}").tasks.getByName("remapJar")
		}
	}
}
